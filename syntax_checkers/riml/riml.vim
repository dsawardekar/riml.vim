"
" This file was automatically generated by riml 0.3.1
" Modify with care!
"
function! s:SID()
  return matchstr(expand('<sfile>'), '<SNR>\zs\d\+\ze_SID$')
endfunction
if exists('g:riml_syntastic_compiler_loaded')
  finish
else
  let g:riml_syntastic_compiler_loaded = 1
endif
" included: 'error_format_builder.riml'
function! s:ErrorFormatBuilderConstructor()
  let errorFormatBuilderObj = {}
  let errorFormatBuilderObj.errors = []
  let errorFormatBuilderObj.error = function('<SNR>' . s:SID() . '_s:ErrorFormatBuilder_error')
  let errorFormatBuilderObj.error_msg = function('<SNR>' . s:SID() . '_s:ErrorFormatBuilder_error_msg')
  let errorFormatBuilderObj.build = function('<SNR>' . s:SID() . '_s:ErrorFormatBuilder_build')
  return errorFormatBuilderObj
endfunction
function! <SID>s:ErrorFormatBuilder_error(entry) dict
  call add(self.errors, a:entry)
  return a:entry
endfunction
function! <SID>s:ErrorFormatBuilder_error_msg(msg) dict
  let entry = "%W%f(%l): " . a:msg . ": %m"
  call self.error(entry)
  return entry
endfunction
function! <SID>s:ErrorFormatBuilder_build() dict
  return join(self.errors, ',')
endfunction
" included: 'syntastic_plugin.riml'
function! s:SyntasticPluginConstructor()
  let syntasticPluginObj = {}
  let syntasticPluginObj.err_builder = s:ErrorFormatBuilderConstructor()
  let syntasticPluginObj.get_exe = function('<SNR>' . s:SID() . '_s:SyntasticPlugin_get_exe')
  let syntasticPluginObj.get_args = function('<SNR>' . s:SID() . '_s:SyntasticPlugin_get_args')
  let syntasticPluginObj.get_post_args = function('<SNR>' . s:SID() . '_s:SyntasticPlugin_get_post_args')
  let syntasticPluginObj.get_filetype = function('<SNR>' . s:SID() . '_s:SyntasticPlugin_get_filetype')
  let syntasticPluginObj.get_tail = function('<SNR>' . s:SID() . '_s:SyntasticPlugin_get_tail')
  let syntasticPluginObj.get_subchecker = function('<SNR>' . s:SID() . '_s:SyntasticPlugin_get_subchecker')
  let syntasticPluginObj.get_makeprg_options = function('<SNR>' . s:SID() . '_s:SyntasticPlugin_get_makeprg_options')
  let syntasticPluginObj.get_makeprg = function('<SNR>' . s:SID() . '_s:SyntasticPlugin_get_makeprg')
  let syntasticPluginObj.get_errorformat = function('<SNR>' . s:SID() . '_s:SyntasticPlugin_get_errorformat')
  let syntasticPluginObj.make = function('<SNR>' . s:SID() . '_s:SyntasticPlugin_make')
  let syntasticPluginObj.get_make_options = function('<SNR>' . s:SID() . '_s:SyntasticPlugin_get_make_options')
  let syntasticPluginObj.is_available = function('<SNR>' . s:SID() . '_s:SyntasticPlugin_is_available')
  let syntasticPluginObj.get_highlight_regex = function('<SNR>' . s:SID() . '_s:SyntasticPlugin_get_highlight_regex')
  let syntasticPluginObj.get_loc_list = function('<SNR>' . s:SID() . '_s:SyntasticPlugin_get_loc_list')
  let syntasticPluginObj.get_name = function('<SNR>' . s:SID() . '_s:SyntasticPlugin_get_name')
  let syntasticPluginObj.register_errors = function('<SNR>' . s:SID() . '_s:SyntasticPlugin_register_errors')
  let syntasticPluginObj.error = function('<SNR>' . s:SID() . '_s:SyntasticPlugin_error')
  let syntasticPluginObj.error_msg = function('<SNR>' . s:SID() . '_s:SyntasticPlugin_error_msg')
  let syntasticPluginObj.register = function('<SNR>' . s:SID() . '_s:SyntasticPlugin_register')
  let syntasticPluginObj.option = function('<SNR>' . s:SID() . '_s:SyntasticPlugin_option')
  return syntasticPluginObj
endfunction
function! <SID>s:SyntasticPlugin_get_exe() dict
  return 0
endfunction
function! <SID>s:SyntasticPlugin_get_args() dict
  return 0
endfunction
function! <SID>s:SyntasticPlugin_get_post_args() dict
  return 0
endfunction
function! <SID>s:SyntasticPlugin_get_filetype() dict
  return 0
endfunction
function! <SID>s:SyntasticPlugin_get_tail() dict
  return 0
endfunction
function! <SID>s:SyntasticPlugin_get_subchecker() dict
  return 0
endfunction
function! <SID>s:SyntasticPlugin_get_makeprg_options() dict
  let opts = {}
  call self.option(opts, 'exe', self.get_exe())
  call self.option(opts, 'args', self.get_args())
  call self.option(opts, 'post_args', self.get_post_args())
  call self.option(opts, 'filetype', self.get_filetype())
  call self.option(opts, 'tail', self.get_tail())
  call self.option(opts, 'subchecker', self.get_subchecker())
  return opts
endfunction
function! <SID>s:SyntasticPlugin_get_makeprg() dict
  return syntastic#makeprg#build(self.get_makeprg_options())
endfunction
function! <SID>s:SyntasticPlugin_get_errorformat() dict
  return self.err_builder.build()
endfunction
function! <SID>s:SyntasticPlugin_make() dict
  let opts = self.get_make_options()
  return SyntasticMake(opts)
endfunction
function! <SID>s:SyntasticPlugin_get_make_options() dict
  let opts = {}
  let opts.makeprg = self.get_makeprg()
  let opts.errorformat = self.get_errorformat()
  return opts
endfunction
function! <SID>s:SyntasticPlugin_is_available() dict
  return 0
endfunction
function! <SID>s:SyntasticPlugin_get_highlight_regex(input) dict
  return ''
endfunction
function! <SID>s:SyntasticPlugin_get_loc_list() dict
  return self.make()
endfunction
function! <SID>s:SyntasticPlugin_get_name() dict
  return ''
endfunction
function! <SID>s:SyntasticPlugin_register_errors() dict
endfunction
function! <SID>s:SyntasticPlugin_error(entry) dict
  call self.err_builder.error(a:entry)
endfunction
function! <SID>s:SyntasticPlugin_error_msg(msg) dict
  call self.err_builder.error_msg(a:msg)
endfunction
function! <SID>s:SyntasticPlugin_register() dict
  call self.register_errors()
  let opts = {}
  let opts.filetype = self.get_filetype()
  let opts.name = self.get_name()
  call g:SyntasticRegistry.CreateAndRegisterChecker(opts)
endfunction
function! <SID>s:SyntasticPlugin_option(opts, key, value) dict
  let value_type = type(a:value)
  if value_type !=# type(0) || a:value
    let a:opts[a:key] = a:value
  endif
endfunction
" included: 'riml_syntastic_plugin.riml'
function! s:RimlSyntasticPluginConstructor()
  let rimlSyntasticPluginObj = {}
  let syntasticPluginObj = s:SyntasticPluginConstructor()
  call extend(rimlSyntasticPluginObj, syntasticPluginObj)
  let rimlSyntasticPluginObj.get_name = function('<SNR>' . s:SID() . '_s:RimlSyntasticPlugin_get_name')
  let rimlSyntasticPluginObj.get_exe = function('<SNR>' . s:SID() . '_s:RimlSyntasticPlugin_get_exe')
  let rimlSyntasticPluginObj.get_args = function('<SNR>' . s:SID() . '_s:RimlSyntasticPlugin_get_args')
  let rimlSyntasticPluginObj.get_filetype = function('<SNR>' . s:SID() . '_s:RimlSyntasticPlugin_get_filetype')
  let rimlSyntasticPluginObj.register_errors = function('<SNR>' . s:SID() . '_s:RimlSyntasticPlugin_register_errors')
  let rimlSyntasticPluginObj.is_available = function('<SNR>' . s:SID() . '_s:RimlSyntasticPlugin_is_available')
  return rimlSyntasticPluginObj
endfunction
function! <SID>s:RimlSyntasticPlugin_get_name() dict
  return 'riml'
endfunction
function! <SID>s:RimlSyntasticPlugin_get_exe() dict
  return 'riml'
endfunction
function! <SID>s:RimlSyntasticPlugin_get_args() dict
  return '--check'
endfunction
function! <SID>s:RimlSyntasticPlugin_get_filetype() dict
  return 'riml'
endfunction
function! <SID>s:RimlSyntasticPlugin_register_errors() dict
  call self.error('%E%f:%n:%s: on line %l:%m')
  call self.error('%Z%m')
  call self.error("%f:%n:in `%s':%m")
endfunction
function! <SID>s:RimlSyntasticPlugin_is_available() dict
  return executable('riml')
endfunction
let s:riml_syntax_checker = s:RimlSyntasticPluginConstructor()
" included: 'callbacks.riml'
function! SyntaxCheckers_riml_riml_IsAvailable()
return s:riml_syntax_checker.is_available()
endfunction
function! SyntaxCheckers_riml_riml_GetHighlightRegex(input)
return s:riml_syntax_checker.get_highlight_regex(a:input)
endfunction
function! SyntaxCheckers_riml_riml_GetLocList()
return s:riml_syntax_checker.get_loc_list()
endfunction
call s:riml_syntax_checker.register()
